/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import classes.GDFReader;
import classes.Resutado;
import classes.NovoClass;
import classes.perfil;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.tg.TinkerGraph;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Dyel
 */
public final class Principal extends javax.swing.JFrame {

    private Graph graph;
    private GDFReader qq;
    private NovoClass nc;
    private List<Vertex> vertL;
    private List<Edge> aresL;
    private Resutado[] res;
    private perfil aux;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        graph = new TinkerGraph();
        qq = new GDFReader();
        nc = new NovoClass();
    }

    public perfil iniciaPerfil() {
        perfil pf = new perfil();
        pf.setCidade("Bismarck");
        pf.setFilmes(new String[]{"Jurassic Park", "West Side Story", "Inception", "Star Wars", "Gladiator", "Poppins", "The Big Lebowski", "Good Will Hunting", "All About Eve", "The Big Lebowski"});
        pf.setGames(new String[]{"Mario", "Sonic", "GTA"});
        pf.setGenero("Male");
        pf.setGrupos(new String[]{"Anime", "Film", "Usa"});
        pf.setMusica(new String[]{"1", "2", "5", "8"});
        pf.setOutros(new String[]{"Bugginho Developer", "NIHON SEKAI", " Weeaboo-chan", "Konnichiwa"});
        pf.setRelacionamento("Single");
        return pf;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tf_caminho = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        stastus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Base:");

        jButton1.setText("Abrir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_caminho, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(104, 104, 104)
                        .addComponent(stastus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tf_caminho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(stastus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Arquivos GDF", "gdf", "GDF");
        chooser.setFileFilter(filter);
        chooser.requestFocus();
        chooser.grabFocus();
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                tf_caminho.setText(chooser.getSelectedFile().getPath());
                InputStream inputstream = new FileInputStream(chooser.getSelectedFile().getPath());
                GDFReader.inputGraph(graph, inputstream, nc);
                Iterator<Vertex> eitr = graph.getVertices().iterator();
                Iterator<Edge> qq1 = graph.getEdges().iterator();
                vertL = new ArrayList<>();
                while (eitr.hasNext()) {
                    vertL.add(eitr.next());
                }
                aresL = new ArrayList<>();
                while (qq1.hasNext()) {
                    aresL.add(qq1.next());
                }
                stastus.setText("Vertices: " + vertL.size() + " Arestas: " + aresL.size());
                res = new Resutado[vertL.size()];
                aux = iniciaPerfil();
                pM();
                Arrays.sort(res, (Resutado b1, Resutado b2) -> {
                    //TODO testar nulos
                    if (b1.getNota() > b2.getNota()) {
                        return -1;
                    }
                    if (b1.getNota() < b2.getNota()) {
                        return 1;
                    }
                    return 0;
                });
                preencheTB();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    public void pM() {
        for (int i = 0; i < vertL.size(); i++) {
            Resutado r = new Resutado();
            res[i] = Nota(vertL.get(i));
        }
    }

    public Resutado Nota(Vertex v) {
        int nota = 0;
        int auxC = 0;
        Resutado au = new Resutado();
        List<String> cc = new ArrayList<>();
        String auxS = "Musicas: ";
        try {
            for (String musica : aux.getMusica()) {
                if (v.getProperty("music").toString().toLowerCase().contains(musica.toLowerCase())) {
                    auxS += musica + ", ";
                    nota++;
                    auxC++;
                }
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "Filmes: ";
        try {
            for (String filmes : aux.getFilmes()) {
                if (v.getProperty("movies").toString().toLowerCase().contains(filmes.toLowerCase())) {
                    auxS += filmes + ", ";
                    nota++;
                    auxC++;
                }
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "Localidade: ";
        try {
            if (v.getProperty("current_city").toString().toLowerCase().contains(aux.getCidade().toLowerCase())) {
                auxS += aux.getCidade() + ",  ";
                nota++;
                auxC++;
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "Games: ";
        try {
            for (String games : aux.getGames()) {
                if (v.getProperty("games").toString().toLowerCase().contains(games.toLowerCase())) {
                    auxS += games + ", ";
                    nota++;
                    auxC++;
                }
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "Grupos: ";
        try {
            for (String auxx : aux.getGrupos()) {
                if (v.getProperty("groups").toString().toLowerCase().contains(auxx.toLowerCase())) {
                    auxS += auxx + ", ";
                    nota++;
                    auxC++;
                }

            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "outros: ";
        try {
            for (String auxx : aux.getOutros()) {

                if (v.getProperty("other").toString().toLowerCase().contains(auxx.toLowerCase())) {
                    auxS += auxx + ", ";
                    nota++;
                    auxC++;
                }
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "Restaurantes: ";
        try {
            for (String auxx : aux.getRestaurantes()) {
                if (v.getProperty("restaurants").toString().toLowerCase().contains(auxx.toLowerCase())) {
                    auxS += auxx + ", ";
                    nota++;
                    auxC++;
                }

            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        auxS = "TV: ";
        try {
            for (String auxx : aux.getTv()) {
                if (v.getProperty("television").toString().toLowerCase().contains(auxx.toLowerCase())) {
                    auxS += auxx + ", ";
                    nota++;
                    auxC++;
                }
            }
        } catch (Exception E) {

        }
        if (auxC > 0) {
            cc.add(auxS);
        }
        auxC = 0;
        au.setId(v.getProperty("name").toString());
        au.setNota(nota);
        au.setComun(cc);
        return au;
    }

    public static boolean useLoop(Resutado[] arr, String targetValue) {
        for (Resutado s : arr) {
            try {
                if (s.getId().equals(targetValue)) {
                    return true;
                }
            } catch (Exception e) {
                return false;
            }
        }
        return false;
    }

    public void preencheTB() {
        String aa[][] = new String[res.length][3];

        int i = 0;
        for (Resutado vertex : res) {
            aa[i][0] = vertex.getId();
            aa[i][1] = vertex.getNota() + "";
            aa[i][2] = vertex.getComun().toString();
            i++;
        }
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                aa,
                new String[]{"Nome", "Nota", "Comum"}
        ));

    }

    public void preencheTB2(List<Edge> elst) {
        List<String> qq = nc.getPropyEd();
        String aa[][] = new String[elst.size()][qq.size()];
        String pp[][] = new String[50][50];
        for (int i = 0; i < 50; i++) {

        }

        int i = 0;
        for (Edge vertex : elst) {
            for (int j = 0; j < qq.size(); j++) {
                try {
                    aa[i][j] = vertex.getProperty(qq.get(j)) + "";
                } catch (Exception e) {
                    aa[i][j] = "";
                }
            }
            i++;
        }
        Arrays.sort(qq.toArray());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                aa,
                qq.toArray()
        ));

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel stastus;
    private javax.swing.JTextField tf_caminho;
    // End of variables declaration//GEN-END:variables
}
